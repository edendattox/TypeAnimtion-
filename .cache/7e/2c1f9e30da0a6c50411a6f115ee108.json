{"id":"node_modules/word-wrapper/index.js","dependencies":[{"name":"E:\\three.js-stuff\\10 - typeanimation\\package.json","includedInParent":true,"mtime":1622607444721},{"name":"E:\\three.js-stuff\\10 - typeanimation\\node_modules\\word-wrapper\\package.json","includedInParent":true,"mtime":1622607444254}],"generated":{"js":"var newline = /\\n/\nvar newlineChar = '\\n'\nvar whitespace = /\\s/\n\nmodule.exports = function(text, opt) {\n    var lines = module.exports.lines(text, opt)\n    return lines.map(function(line) {\n        return text.substring(line.start, line.end)\n    }).join('\\n')\n}\n\nmodule.exports.lines = function wordwrap(text, opt) {\n    opt = opt||{}\n\n    //zero width results in nothing visible\n    if (opt.width === 0 && opt.mode !== 'nowrap') \n        return []\n\n    text = text||''\n    var width = typeof opt.width === 'number' ? opt.width : Number.MAX_VALUE\n    var start = Math.max(0, opt.start||0)\n    var end = typeof opt.end === 'number' ? opt.end : text.length\n    var mode = opt.mode\n\n    var measure = opt.measure || monospace\n    if (mode === 'pre')\n        return pre(measure, text, start, end, width)\n    else\n        return greedy(measure, text, start, end, width, mode)\n}\n\nfunction idxOf(text, chr, start, end) {\n    var idx = text.indexOf(chr, start)\n    if (idx === -1 || idx > end)\n        return end\n    return idx\n}\n\nfunction isWhitespace(chr) {\n    return whitespace.test(chr)\n}\n\nfunction pre(measure, text, start, end, width) {\n    var lines = []\n    var lineStart = start\n    for (var i=start; i<end && i<text.length; i++) {\n        var chr = text.charAt(i)\n        var isNewline = newline.test(chr)\n\n        //If we've reached a newline, then step down a line\n        //Or if we've reached the EOF\n        if (isNewline || i===end-1) {\n            var lineEnd = isNewline ? i : i+1\n            var measured = measure(text, lineStart, lineEnd, width)\n            lines.push(measured)\n            \n            lineStart = i+1\n        }\n    }\n    return lines\n}\n\nfunction greedy(measure, text, start, end, width, mode) {\n    //A greedy word wrapper based on LibGDX algorithm\n    //https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java\n    var lines = []\n\n    var testWidth = width\n    //if 'nowrap' is specified, we only wrap on newline chars\n    if (mode === 'nowrap')\n        testWidth = Number.MAX_VALUE\n\n    while (start < end && start < text.length) {\n        //get next newline position\n        var newLine = idxOf(text, newlineChar, start, end)\n\n        //eat whitespace at start of line\n        while (start < newLine) {\n            if (!isWhitespace( text.charAt(start) ))\n                break\n            start++\n        }\n\n        //determine visible # of glyphs for the available width\n        var measured = measure(text, start, newLine, testWidth)\n\n        var lineEnd = start + (measured.end-measured.start)\n        var nextStart = lineEnd + newlineChar.length\n\n        //if we had to cut the line before the next newline...\n        if (lineEnd < newLine) {\n            //find char to break on\n            while (lineEnd > start) {\n                if (isWhitespace(text.charAt(lineEnd)))\n                    break\n                lineEnd--\n            }\n            if (lineEnd === start) {\n                if (nextStart > start + newlineChar.length) nextStart--\n                lineEnd = nextStart // If no characters to break, show all.\n            } else {\n                nextStart = lineEnd\n                //eat whitespace at end of line\n                while (lineEnd > start) {\n                    if (!isWhitespace(text.charAt(lineEnd - newlineChar.length)))\n                        break\n                    lineEnd--\n                }\n            }\n        }\n        if (lineEnd >= start) {\n            var result = measure(text, start, lineEnd, testWidth)\n            lines.push(result)\n        }\n        start = nextStart\n    }\n    return lines\n}\n\n//determines the visible number of glyphs within a given width\nfunction monospace(text, start, end, width) {\n    var glyphs = Math.min(width, end-start)\n    return {\n        start: start,\n        end: start+glyphs\n    }\n}"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/word-wrapper/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/word-wrapper/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}}],"sources":{"node_modules/word-wrapper/index.js":"var newline = /\\n/\nvar newlineChar = '\\n'\nvar whitespace = /\\s/\n\nmodule.exports = function(text, opt) {\n    var lines = module.exports.lines(text, opt)\n    return lines.map(function(line) {\n        return text.substring(line.start, line.end)\n    }).join('\\n')\n}\n\nmodule.exports.lines = function wordwrap(text, opt) {\n    opt = opt||{}\n\n    //zero width results in nothing visible\n    if (opt.width === 0 && opt.mode !== 'nowrap') \n        return []\n\n    text = text||''\n    var width = typeof opt.width === 'number' ? opt.width : Number.MAX_VALUE\n    var start = Math.max(0, opt.start||0)\n    var end = typeof opt.end === 'number' ? opt.end : text.length\n    var mode = opt.mode\n\n    var measure = opt.measure || monospace\n    if (mode === 'pre')\n        return pre(measure, text, start, end, width)\n    else\n        return greedy(measure, text, start, end, width, mode)\n}\n\nfunction idxOf(text, chr, start, end) {\n    var idx = text.indexOf(chr, start)\n    if (idx === -1 || idx > end)\n        return end\n    return idx\n}\n\nfunction isWhitespace(chr) {\n    return whitespace.test(chr)\n}\n\nfunction pre(measure, text, start, end, width) {\n    var lines = []\n    var lineStart = start\n    for (var i=start; i<end && i<text.length; i++) {\n        var chr = text.charAt(i)\n        var isNewline = newline.test(chr)\n\n        //If we've reached a newline, then step down a line\n        //Or if we've reached the EOF\n        if (isNewline || i===end-1) {\n            var lineEnd = isNewline ? i : i+1\n            var measured = measure(text, lineStart, lineEnd, width)\n            lines.push(measured)\n            \n            lineStart = i+1\n        }\n    }\n    return lines\n}\n\nfunction greedy(measure, text, start, end, width, mode) {\n    //A greedy word wrapper based on LibGDX algorithm\n    //https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java\n    var lines = []\n\n    var testWidth = width\n    //if 'nowrap' is specified, we only wrap on newline chars\n    if (mode === 'nowrap')\n        testWidth = Number.MAX_VALUE\n\n    while (start < end && start < text.length) {\n        //get next newline position\n        var newLine = idxOf(text, newlineChar, start, end)\n\n        //eat whitespace at start of line\n        while (start < newLine) {\n            if (!isWhitespace( text.charAt(start) ))\n                break\n            start++\n        }\n\n        //determine visible # of glyphs for the available width\n        var measured = measure(text, start, newLine, testWidth)\n\n        var lineEnd = start + (measured.end-measured.start)\n        var nextStart = lineEnd + newlineChar.length\n\n        //if we had to cut the line before the next newline...\n        if (lineEnd < newLine) {\n            //find char to break on\n            while (lineEnd > start) {\n                if (isWhitespace(text.charAt(lineEnd)))\n                    break\n                lineEnd--\n            }\n            if (lineEnd === start) {\n                if (nextStart > start + newlineChar.length) nextStart--\n                lineEnd = nextStart // If no characters to break, show all.\n            } else {\n                nextStart = lineEnd\n                //eat whitespace at end of line\n                while (lineEnd > start) {\n                    if (!isWhitespace(text.charAt(lineEnd - newlineChar.length)))\n                        break\n                    lineEnd--\n                }\n            }\n        }\n        if (lineEnd >= start) {\n            var result = measure(text, start, lineEnd, testWidth)\n            lines.push(result)\n        }\n        start = nextStart\n    }\n    return lines\n}\n\n//determines the visible number of glyphs within a given width\nfunction monospace(text, start, end, width) {\n    var glyphs = Math.min(width, end-start)\n    return {\n        start: start,\n        end: start+glyphs\n    }\n}"},"lineCount":127}},"error":null,"hash":"dcdf43d93922d18e3e36c4424cddcfb3","cacheData":{"env":{}}}