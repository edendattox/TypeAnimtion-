{"id":"node_modules/three-bmfont-text/shaders/msdf.js","dependencies":[{"name":"E:\\three.js-stuff\\10 - typeanimation\\package.json","includedInParent":true,"mtime":1622607444721},{"name":"E:\\three.js-stuff\\10 - typeanimation\\node_modules\\three-bmfont-text\\package.json","includedInParent":true,"mtime":1622607444588},{"name":"object-assign","loc":{"line":1,"column":21},"parent":"E:\\three.js-stuff\\10 - typeanimation\\node_modules\\three-bmfont-text\\shaders\\msdf.js","resolved":"E:\\three.js-stuff\\10 - typeanimation\\node_modules\\object-assign\\index.js"}],"generated":{"js":"var assign = require('object-assign');\n\nmodule.exports = function createMSDFShader (opt) {\n  opt = opt || {};\n  var opacity = typeof opt.opacity === 'number' ? opt.opacity : 1;\n  var alphaTest = typeof opt.alphaTest === 'number' ? opt.alphaTest : 0.0001;\n  var precision = opt.precision || 'highp';\n  var color = opt.color;\n  var map = opt.map;\n  var negate = typeof opt.negate === 'boolean' ? opt.negate : true;\n\n  // remove to satisfy r73\n  delete opt.map;\n  delete opt.color;\n  delete opt.precision;\n  delete opt.opacity;\n  delete opt.negate;\n\n  return assign({\n    uniforms: {\n      opacity: { type: 'f', value: opacity },\n      map: { type: 't', value: map || new THREE.Texture() },\n      color: { type: 'c', value: new THREE.Color(color) }\n    },\n    vertexShader: [\n      'attribute vec2 uv;',\n      'attribute vec4 position;',\n      'uniform mat4 projectionMatrix;',\n      'uniform mat4 modelViewMatrix;',\n      'varying vec2 vUv;',\n      'void main() {',\n      'vUv = uv;',\n      'gl_Position = projectionMatrix * modelViewMatrix * position;',\n      '}'\n    ].join('\\n'),\n    fragmentShader: [\n      '#ifdef GL_OES_standard_derivatives',\n      '#extension GL_OES_standard_derivatives : enable',\n      '#endif',\n      'precision ' + precision + ' float;',\n      'uniform float opacity;',\n      'uniform vec3 color;',\n      'uniform sampler2D map;',\n      'varying vec2 vUv;',\n\n      'float median(float r, float g, float b) {',\n      '  return max(min(r, g), min(max(r, g), b));',\n      '}',\n\n      'void main() {',\n      '  vec3 sample = ' + (negate ? '1.0 - ' : '') + 'texture2D(map, vUv).rgb;',\n      '  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;',\n      '  float alpha = clamp(sigDist/fwidth(sigDist) + 0.5, 0.0, 1.0);',\n      '  gl_FragColor = vec4(color.xyz, alpha * opacity);',\n      alphaTest === 0\n        ? ''\n        : '  if (gl_FragColor.a < ' + alphaTest + ') discard;',\n      '}'\n    ].join('\\n')\n  }, opt);\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/three-bmfont-text/shaders/msdf.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}}],"sources":{"node_modules/three-bmfont-text/shaders/msdf.js":"var assign = require('object-assign');\n\nmodule.exports = function createMSDFShader (opt) {\n  opt = opt || {};\n  var opacity = typeof opt.opacity === 'number' ? opt.opacity : 1;\n  var alphaTest = typeof opt.alphaTest === 'number' ? opt.alphaTest : 0.0001;\n  var precision = opt.precision || 'highp';\n  var color = opt.color;\n  var map = opt.map;\n  var negate = typeof opt.negate === 'boolean' ? opt.negate : true;\n\n  // remove to satisfy r73\n  delete opt.map;\n  delete opt.color;\n  delete opt.precision;\n  delete opt.opacity;\n  delete opt.negate;\n\n  return assign({\n    uniforms: {\n      opacity: { type: 'f', value: opacity },\n      map: { type: 't', value: map || new THREE.Texture() },\n      color: { type: 'c', value: new THREE.Color(color) }\n    },\n    vertexShader: [\n      'attribute vec2 uv;',\n      'attribute vec4 position;',\n      'uniform mat4 projectionMatrix;',\n      'uniform mat4 modelViewMatrix;',\n      'varying vec2 vUv;',\n      'void main() {',\n      'vUv = uv;',\n      'gl_Position = projectionMatrix * modelViewMatrix * position;',\n      '}'\n    ].join('\\n'),\n    fragmentShader: [\n      '#ifdef GL_OES_standard_derivatives',\n      '#extension GL_OES_standard_derivatives : enable',\n      '#endif',\n      'precision ' + precision + ' float;',\n      'uniform float opacity;',\n      'uniform vec3 color;',\n      'uniform sampler2D map;',\n      'varying vec2 vUv;',\n\n      'float median(float r, float g, float b) {',\n      '  return max(min(r, g), min(max(r, g), b));',\n      '}',\n\n      'void main() {',\n      '  vec3 sample = ' + (negate ? '1.0 - ' : '') + 'texture2D(map, vUv).rgb;',\n      '  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;',\n      '  float alpha = clamp(sigDist/fwidth(sigDist) + 0.5, 0.0, 1.0);',\n      '  gl_FragColor = vec4(color.xyz, alpha * opacity);',\n      alphaTest === 0\n        ? ''\n        : '  if (gl_FragColor.a < ' + alphaTest + ') discard;',\n      '}'\n    ].join('\\n')\n  }, opt);\n};\n"},"lineCount":62}},"error":null,"hash":"89d930c98d303743495555141ab68f25","cacheData":{"env":{}}}