{"id":"node_modules/flatten-vertex-data/index.js","dependencies":[{"name":"E:\\three.js-stuff\\10 - typeanimation\\package.json","includedInParent":true,"mtime":1622607444721},{"name":"E:\\three.js-stuff\\10 - typeanimation\\node_modules\\flatten-vertex-data\\package.json","includedInParent":true,"mtime":1622607444253},{"name":"dtype","loc":{"line":2,"column":20},"parent":"E:\\three.js-stuff\\10 - typeanimation\\node_modules\\flatten-vertex-data\\index.js","resolved":"E:\\three.js-stuff\\10 - typeanimation\\node_modules\\dtype\\index.js"}],"generated":{"js":"/*eslint new-cap:0*/\nvar dtype = require('dtype')\n\nmodule.exports = flattenVertexData\n\nfunction flattenVertexData (data, output, offset) {\n  if (!data) throw new TypeError('must specify data as first parameter')\n  offset = +(offset || 0) | 0\n\n  if (Array.isArray(data) && (data[0] && typeof data[0][0] === 'number')) {\n    var dim = data[0].length\n    var length = data.length * dim\n    var i, j, k, l\n\n    // no output specified, create a new typed array\n    if (!output || typeof output === 'string') {\n      output = new (dtype(output || 'float32'))(length + offset)\n    }\n\n    var dstLength = output.length - offset\n    if (length !== dstLength) {\n      throw new Error('source length ' + length + ' (' + dim + 'x' + data.length + ')' +\n        ' does not match destination length ' + dstLength)\n    }\n\n    for (i = 0, k = offset; i < data.length; i++) {\n      for (j = 0; j < dim; j++) {\n        output[k++] = data[i][j] === null ? NaN : data[i][j]\n      }\n    }\n  } else {\n    if (!output || typeof output === 'string') {\n      // no output, create a new one\n      var Ctor = dtype(output || 'float32')\n\n      // handle arrays separately due to possible nulls\n      if (Array.isArray(data) || output === 'array') {\n        output = new Ctor(data.length + offset)\n        for (i = 0, k = offset, l = output.length; k < l; k++, i++) {\n          output[k] = data[i] === null ? NaN : data[i]\n        }\n      } else {\n        if (offset === 0) {\n          output = new Ctor(data)\n        } else {\n          output = new Ctor(data.length + offset)\n\n          output.set(data, offset)\n        }\n      }\n    } else {\n      // store output in existing array\n      output.set(data, offset)\n    }\n  }\n\n  return output\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/flatten-vertex-data/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}}],"sources":{"node_modules/flatten-vertex-data/index.js":"/*eslint new-cap:0*/\nvar dtype = require('dtype')\n\nmodule.exports = flattenVertexData\n\nfunction flattenVertexData (data, output, offset) {\n  if (!data) throw new TypeError('must specify data as first parameter')\n  offset = +(offset || 0) | 0\n\n  if (Array.isArray(data) && (data[0] && typeof data[0][0] === 'number')) {\n    var dim = data[0].length\n    var length = data.length * dim\n    var i, j, k, l\n\n    // no output specified, create a new typed array\n    if (!output || typeof output === 'string') {\n      output = new (dtype(output || 'float32'))(length + offset)\n    }\n\n    var dstLength = output.length - offset\n    if (length !== dstLength) {\n      throw new Error('source length ' + length + ' (' + dim + 'x' + data.length + ')' +\n        ' does not match destination length ' + dstLength)\n    }\n\n    for (i = 0, k = offset; i < data.length; i++) {\n      for (j = 0; j < dim; j++) {\n        output[k++] = data[i][j] === null ? NaN : data[i][j]\n      }\n    }\n  } else {\n    if (!output || typeof output === 'string') {\n      // no output, create a new one\n      var Ctor = dtype(output || 'float32')\n\n      // handle arrays separately due to possible nulls\n      if (Array.isArray(data) || output === 'array') {\n        output = new Ctor(data.length + offset)\n        for (i = 0, k = offset, l = output.length; k < l; k++, i++) {\n          output[k] = data[i] === null ? NaN : data[i]\n        }\n      } else {\n        if (offset === 0) {\n          output = new Ctor(data)\n        } else {\n          output = new Ctor(data.length + offset)\n\n          output.set(data, offset)\n        }\n      }\n    } else {\n      // store output in existing array\n      output.set(data, offset)\n    }\n  }\n\n  return output\n}\n"},"lineCount":59}},"error":null,"hash":"1ac5ccbef606bb0c3654967f4a5b572d","cacheData":{"env":{}}}